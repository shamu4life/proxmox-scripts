#!/bin/bash

# #############################################################################
# Interactive script to create a Proxmox LXC container for yt-dlp
# Base OS: Debian 13 (Trixie)
# Features: 
#   - Automatically downloads the template if it is not found.
#   - Prompts for static IP or DHCP configuration.
# #############################################################################

# --- STOP ON ERRORS ---
set -e

# --- STATIC CONFIGURATION (Edit if necessary) ---
STORAGE="local-lvm"                   # Proxmox storage pool for the container's disk
TEMPLATE_NAME="debian-13-standard"    # Name of the template to search for and download
# The full template path is constructed after confirming the download
TEMPLATE="local:vztmpl/${TEMPLATE_NAME}_13.0-1_amd64.tar.zst" 

# --- SCRIPT LOGIC ---

# Function to check if a command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Check for necessary Proxmox commands
if ! command_exists pct || ! command_exists pveam; then
    echo "‚ùå This script must be run on a Proxmox VE host."
    exit 1
fi

# Check if the Debian 13 template exists, download if it doesn't
if ! pveam available --section system | grep -q "$TEMPLATE_NAME"; then
    echo "üü° Debian 13 template not found. Attempting to download it now..."
    echo "‚è≥ Updating template list..."
    pveam update
    echo "üì• Downloading Debian 13 template... (This may take a moment)"
    pveam download local $TEMPLATE_NAME
    echo "‚úÖ Template downloaded successfully."
else
    echo "‚úÖ Debian 13 template already exists."
fi

echo "---"
echo "Please provide the details for the new LXC container."
echo "---"

# --- USER PROMPTS ---

# Prompt for Container ID, Hostname, Password, and Resources...
while true; do
    read -p "Enter a unique Container ID (e.g., 205): " CT_ID
    if ! [[ "$CT_ID" =~ ^[0-9]+$ ]]; then
        echo "‚ùå Invalid input. Please enter a number."
    elif pct status "$CT_ID" >/dev/null 2>&1; then
        echo "‚ùå Container ID $CT_ID is already in use. Please choose another."
    else
        break
    fi
done
read -p "Enter a hostname for the container (e.g., yt-dlp-runner): " HOSTNAME
while true; do
    read -sp "Enter the root password for the container: " PASSWORD
    echo
    read -sp "Confirm the root password: " PASSWORD_CONFIRM
    echo
    if [ "$PASSWORD" = "$PASSWORD_CONFIRM" ] && [ -n "$PASSWORD" ]; then
        break
    elif [ -z "$PASSWORD" ]; then
        echo "‚ùå Password cannot be empty."
    else
        echo "‚ùå Passwords do not match. Please try again."
    fi
done
while true; do read -p "Enter the number of CPU cores (e.g., 2): " CORES && [[ "$CORES" =~ ^[1-9][0-9]*$ ]] && break || echo "‚ùå Invalid input."; done
while true; do read -p "Enter the amount of RAM in MB (e.g., 4096): " RAM_MB && [[ "$RAM_MB" =~ ^[1-9][0-9]*$ ]] && break || echo "‚ùå Invalid input."; done
while true; do read -p "Enter the disk size in GB (e.g., 10): " DISK_GB && [[ "$DISK_GB" =~ ^[1-9][0-9]*$ ]] && break || echo "‚ùå Invalid input."; done

# Prompt for Network Bridge Selection
echo "---"
echo "Available network bridges:"
mapfile -t bridges < <(ip -br link show type bridge | awk '{print $1}')
if [ ${#bridges[@]} -eq 0 ]; then echo "‚ùå No network bridges (vmbr) found." && exit 1; fi
select BRIDGE in "${bridges[@]}"; do
    if [ -n "$BRIDGE" ]; then echo "‚úÖ You selected bridge: $BRIDGE"; break; else echo "‚ùå Invalid selection."; fi
done

# Prompt for Network Configuration (DHCP or Static)
NET_CONFIG="ip=dhcp" # Default to DHCP
IP_ADDRESS=""
GATEWAY=""
while true; do
    read -p "Enter static IP (e.g., 192.168.1.50/24) or leave blank for DHCP: " IP_ADDRESS_INPUT
    if [ -z "$IP_ADDRESS_INPUT" ]; then
        echo "‚úÖ Using DHCP for network configuration."
        break
    elif [[ "$IP_ADDRESS_INPUT" =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}/[0-9]{1,2}$ ]]; then
        IP_ADDRESS=$IP_ADDRESS_INPUT
        while true; do
            read -p "Enter the gateway IP address (e.g., 192.168.1.1): " GATEWAY_INPUT
            if [[ "$GATEWAY_INPUT" =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
                GATEWAY=$GATEWAY_INPUT
                NET_CONFIG="ip=${IP_ADDRESS},gw=${GATEWAY}"
                break
            else
                echo "‚ùå Invalid gateway format. Please use x.x.x.x format."
            fi
        done
        break
    else
        echo "‚ùå Invalid format. Use CIDR notation (e.g., 192.168.1.50/24) or leave blank."
    fi
done
echo "---"

# --- CONFIRMATION ---
echo "‚öôÔ∏è  Review the configuration:"
echo "--------------------------------"
echo "Container ID:   $CT_ID"
echo "Hostname:       $HOSTNAME"
echo "CPU Cores:      $CORES"
echo "RAM:            $RAM_MB MB"
echo "Disk Size:      $DISK_GB GB"
echo "Network Bridge: $BRIDGE"
if [ -n "$IP_ADDRESS" ]; then
    echo "IP Address:     $IP_ADDRESS (Static)"
    echo "Gateway:        $GATEWAY"
else
    echo "IP Address:     DHCP"
fi
echo "Storage Pool:   $STORAGE"
echo "Base OS:        Debian 13 (Trixie)"
echo "--------------------------------"

read -p "Proceed with creation? (y/N): " CONFIRM
if [[ ! "$CONFIRM" =~ ^[yY](es)*$ ]]; then
    echo "üö´ Creation cancelled."
    exit 1
fi

# --- CONTAINER CREATION ---
echo "üî• Creating LXC container $CT_ID ($HOSTNAME)..."

pct create $CT_ID $TEMPLATE \
    --hostname $HOSTNAME \
    --password $PASSWORD \
    --cores $CORES \
    --memory $RAM_MB \
    --rootfs $STORAGE:$DISK_GB \
    --net0 name=eth0,bridge=$BRIDGE,$NET_CONFIG \
    --onboot 1 \
    --start 1

echo "‚è≥ Waiting for container to boot and get a network connection..."
sleep 15

echo "üöÄ Container created. Now configuring software..."

pct exec $CT_ID -- bash -c "apt-get update && apt-get upgrade -y"
echo "‚úÖ System updated."

pct exec $CT_ID -- bash -c "apt-get install -y ffmpeg python3-pip"
echo "‚úÖ Dependencies (ffmpeg, pip) installed."

pct exec $CT_ID -- bash -c "pip install yt-dlp"
echo "‚úÖ yt-dlp installed."

# Get IP address for the final message
if [ -n "$GATEWAY" ]; then
    # For static IP, we already know the address (without CIDR)
    CT_IP="${IP_ADDRESS%/*}"
else
    # For DHCP, we need to query the container
    CT_IP=$(pct exec $CT_ID -- ip -4 addr show eth0 | grep -oP '(?<=inet\s)\d+(\.\d+){3}')
fi

echo ""
echo "üéâ --- Success! --- üéâ"
echo "LXC Container '$HOSTNAME' (ID: $CT_ID) is ready."
echo "It has been assigned the IP address: $CT_IP"
echo "You can access it with: ssh root@$CT_IP"

exit 0
